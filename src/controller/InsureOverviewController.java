package controller;

import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import com.github.daytron.simpledialogfx.data.DialogResponse;
import com.github.daytron.simpledialogfx.dialog.Dialog;
import com.github.daytron.simpledialogfx.dialog.DialogType;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.stage.Stage;
import model.IbCustomer;
import model.IbInsurance;
import model.IbMasterValue;
import model.MasterTypes;
import model.TableInfoRelation;
import util.ChangeListener;
import util.InsureCompleteVO;
import util.NumberTextField;

public class InsureOverviewController {

	private InsureCompleteVO icVO = null;
	@FXML
	private ComboBox cbCompania;

	public ComboBox getcbCompania() {
		return cbCompania;
	}

	@FXML
	private TextField tvPoliza;
	@FXML
	private ComboBox cbFormaPago;

	public ComboBox getcbFormaPago() {
		return cbFormaPago;
	}

	@FXML
	private DatePicker dpFechaInicio;
	@FXML
	private DatePicker dpFechaFin;
	@FXML
	private NumberTextField tvPrimaNeta;
	@FXML
	private ComboBox cbDuracion;

	public ComboBox getcbDuracion() {
		return cbDuracion;
	}

	@FXML
	private Label lbCliente;

	// Event Listener on Button.onAction
	@FXML
	public void handleAnadirFormaPago(ActionEvent event) {
		// TODO Autogenerated
	}
		
	// Event Listener on Button.onAction
	@FXML
	public void handleAnadirCompania(ActionEvent event) {
		Parent root;
		FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/MasterValuesOverview.fxml"));

		try {
			root = (Parent) loader.load();
			Stage stage = new Stage();
			stage.setTitle("Información maestro de valores.");
			MasterValuesOverviewController controller = loader.<MasterValuesOverviewController> getController();
			stage.setScene(new Scene(root, 750, 480));
			stage.setScene(stage.getScene());
			controller.initData(MasterTypes.TYPE_COMPANIA);
			stage.show();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	@FXML
	public void handleSiguiente(ActionEvent event) {
		String duracion = "";
		if (null != cbDuracion.getSelectionModel().getSelectedItem()){
			duracion = cbDuracion.getSelectionModel().getSelectedItem().toString();
		}
		
		LocalDate dateInicio = dpFechaInicio.getValue();
		LocalDate dateInicioAux = dpFechaInicio.getValue();
		LocalDate dateFin = dpFechaFin.getValue();
		LocalDate dateImpuestaFin;
		String formaDePago = "";
		String tipoDeRiesgo="";
		String estado="";
		
		if (null != cbFormaPago.getSelectionModel().getSelectedItem()){
			formaDePago = cbFormaPago.getSelectionModel().getSelectedItem().toString();
		}

		boolean aviso = false;
		if(isValid (tvPrimaNeta.getText())){
		switch (duracion) {
		case "ANUAL":
			dateImpuestaFin = dateInicio.plusYears(1);
			if (!dateImpuestaFin.equals(dateFin)) {
				aviso = true;
			}
			break;
		case "SEMESTRAL":
			dateImpuestaFin = dateInicio.plusMonths(6);
			if (!dateImpuestaFin.equals(dateFin)) {
				aviso = true;
			}
			break;
		case "TRIMESTRAL":
			dateImpuestaFin = dateInicio.plusMonths(3);
			if (!dateImpuestaFin.equals(dateFin)) {
				aviso = true;
			}
			break;

		default:

			break;
		}
		boolean showWindowBank = true;
		if (dateInicioAux.isBefore(dateFin)) {
			if (aviso) {
				Dialog dialog = new Dialog(DialogType.CONFIRMATION, "INFORMACIÓN",
						"¿Estás seguro qué desear seguir, ya que el tipo de duración "
								+ cbDuracion.getSelectionModel().getSelectedItem()
								+ " difiere con las fechas establecidas en fecha inicio: " + dpFechaInicio.getValue()
								+ " y fecha fin: " + dpFechaFin.getValue() + "?");
				dialog.showAndWait();
				if (dialog.getResponse() == DialogResponse.YES) {
					showWindowBank = true;
				} else {
					showWindowBank = false;
				}

			}
		} else {
			Dialog dialog = new Dialog(DialogType.INFORMATION, "INFORMACIÓN", "La fecha fin: " + dpFechaFin.getValue()
					+ " no puede ser anterior a la fecha inicio: " + dpFechaInicio.getValue());

			dialog.showAndWait();
			showWindowBank = false;
		}
		if (showWindowBank) {
			if (!tvPoliza.getText().isEmpty() && cbCompania.getSelectionModel().getSelectedItem() != null
					&& cbDuracion.getSelectionModel().getSelectedItem() != null
					&& cbFormaPago.getSelectionModel().getSelectedItem() != null
					&& !tvPrimaNeta.getText().isEmpty()) {


				try {
					IbInsurance datosSeguro = new IbInsurance();
					datosSeguro.setCompania(cbCompania.getSelectionModel().getSelectedItem().toString());
					Date utilDateInicio = Date
							.from(dpFechaInicio.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
					Date utilDateFin = Date
							.from(dpFechaFin.getValue().atStartOfDay(ZoneId.systemDefault()).toInstant());
					datosSeguro.setFechaEntradaVigor(utilDateInicio);
					datosSeguro.setFechaInicio(utilDateInicio);
					datosSeguro.setFechaFin(utilDateFin);
					
					double primaNeta=0;
					if (null != tvPrimaNeta.getText() && !tvPrimaNeta.getText().isEmpty()){
						primaNeta = Double.parseDouble(tvPrimaNeta.getText().replace(",", "."));
					}
					datosSeguro.setPrimaNeta(primaNeta);
					
					if(!cbDuracion.getSelectionModel().getSelectedItem().toString().isEmpty()){
					IbMasterValue imv = util.masterValueUtil.getMasterValueByValor(duracion);
					duracion =imv.getValor();
					}
					datosSeguro.setDuracion(duracion);
					
					
					if (!formaDePago.isEmpty()){
					IbMasterValue imv = util.masterValueUtil.getMasterValueByValor(formaDePago);
					formaDePago = imv.getValor();
					}								
					datosSeguro.setFormaPago(formaDePago);
					
					
					IbMasterValue imv = util.masterValueUtil.getMasterValueByValor(icVO.getTipoSeguro());
					tipoDeRiesgo = imv.getValor();												
					datosSeguro.setTipoRiesgo(tipoDeRiesgo);					
					
					//INEST01-->Vigente
					datosSeguro.setEstado("INEST01");
					//mostrar error al no insertar poliza
					datosSeguro.setNumeroPoliza(tvPoliza.getText());
					icVO.setDatosSeguro(datosSeguro);
					Parent root;
					Stage stage = new Stage();
					if(null==imv.getDescripcion2() && imv.getDescripcion2().isEmpty()){
					FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/BankAccountOverview.fxml"));
					root = (Parent) loader.load();

					stage.setTitle("Datos Cuenta Bancaria.");
					stage.setScene(new Scene(root, 550, 370));
					stage.setScene(stage.getScene());
					BankAccountOverviewController controller = (BankAccountOverviewController) loader.getController();
					controller.initData(icVO);
					}else{
						FXMLLoader loader = new FXMLLoader(getClass().getResource("/views/InsureDetailOverview.fxml"));
						root = (Parent) loader.load();
						stage.setTitle("Detalle Seguro Vehículo.");
						stage.setScene(new Scene(root, 563,485));
						stage.setScene(stage.getScene());
						InsureDetailOverviewController controller = (InsureDetailOverviewController) loader.getController();
						controller.initData(icVO);
					}
					
					stage.show();
					((Node) (event.getSource())).getScene().getWindow().hide();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}else{
				Dialog dialog = new Dialog(DialogType.INFORMATION, "INFORMACIÓN",
						"Existe algún campo que no está completo. Revísalos y vuelve a hacer click en siguiente.");
				dialog.showAndWait();
			}
		}
		}else{
			Dialog dialog = new Dialog(DialogType.INFORMATION, "INFORMACIÓN",
					"El campo prima neta no es válido, contiene mas de una ','.");
			dialog.showAndWait();
		}
	}

	private boolean isValid(String text) {
		// TODO Auto-generated method stub
		Character coma = ',';
		int contador = 0;
		for (int i = 0; i < text.length(); i++) {
			Character ch = text.charAt(i);
			if (ch == coma){
				contador++;
			}
			
		}
		if (contador >1){
			return false;
		}
		return true;
	}

	@FXML
	public void handleDuracionCB(ActionEvent event) {
		LocalDate ldFechaInicio = dpFechaInicio.getValue();
		String duracion = cbDuracion.getSelectionModel().getSelectedItem().toString();
		if (!duracion.isEmpty()) {
			LocalDate date = date = dpFechaInicio.getValue();
			switch (duracion) {
			case "ANUAL":
				dpFechaFin.setValue(date.plusYears(1));
				break;
			case "SEMESTRAL":
				dpFechaFin.setValue(date.plusMonths(6));
				break;
			case "TRIMESTRAL":
				dpFechaFin.setValue(date.plusMonths(3));
				break;

			default:
				dpFechaFin.setValue(date.plusYears(1));
				break;
			}
		}
	}

	public void initData(InsureCompleteVO icVO) {
		Iterator itr = icVO.getDatosClienteRelation().iterator();
		String dni = "";
		while (itr.hasNext()) {
			TableInfoRelation element = (TableInfoRelation) itr.next();
			if (element.getTipo().equals("TITULAR")) {
				lbCliente.setText(element.getNombre() + " " + element.getApellidos());
				dni = element.getDni();
				icVO.setNombreCompletoTitular(lbCliente.getText());
				icVO.setDniTitular(dni);
			}
		}

		EntityManagerFactory emf;
		EntityManager em;
		emf = Persistence.createEntityManagerFactory("prodiSegur");
		em = emf.createEntityManager();
		EntityTransaction tx = em.getTransaction();
		TypedQuery<String> query = em.createNamedQuery("IbMasterValue.findByType", String.class);
		query.setParameter("type", "INFPA00");
		List<String> listFormaPago = query.getResultList();
		ObservableList<String> listaObservableFormaPago = FXCollections.observableArrayList(listFormaPago);
		getcbFormaPago().setItems(listaObservableFormaPago);

		TypedQuery<String> queryDuracion = em.createNamedQuery("IbMasterValue.findByType", String.class);
		queryDuracion.setParameter("type", "INDUR00");
		List<String> listDuracion = queryDuracion.getResultList();
		ObservableList<String> listaObsevableDuracion = FXCollections.observableArrayList(listDuracion);
		getcbDuracion().setItems(listaObsevableDuracion);

		TypedQuery<String> queryCompania = em.createNamedQuery("IbMasterValue.findByType", String.class);
		queryCompania.setParameter("type", "INTCS00");
		List<String> listCompania = queryCompania.getResultList();
		ObservableList<String> listaObsevableCompania = FXCollections.observableArrayList(listCompania);
		getcbCompania().setItems(listaObsevableCompania);

//		TypedQuery<IbCustomer> queryCliente = em.createNamedQuery("IbCustomer.findDNI", IbCustomer.class);
//		queryCliente.setParameter("dni", dni);
//		List<IbCustomer> listCliente = queryCliente.getResultList();
//		icVO.setDatosCliente(listCliente.get(0));

		
		Date input = new Date();
		LocalDate date = input.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
		dpFechaInicio.setValue(date);

		dpFechaFin.setValue(date.plusYears(1));

		this.icVO =icVO;
	}
}
